# -*- mode: Python; scons script to build sweetspot serwer -*-

"""sconscript to build serwer application, Python, Django"""

import os, platform, re, shutil, json

Import('env')

Import('SWEETSPOT_VER_MAJOR')
Import('SWEETSPOT_VER_MINOR')
Import('SWEETSPOT_VER_COMPILATION')
Import('WEB_SRV_PREFIX WEB_SRV_HOST WEB_SRV_PORT WEB_CLIENT_HOST WEB_CLIENT_PORT')
Import('DB_NAME DB_USER DB_PASSWORD')

def build_websrv_version( target, source, env):
   file=open(str(target[0]),'w')
   file.write('##\n# @file {}\n# @brief Version information, file generated by SCons\n\n'.format(target[0]))
   file.write('major = ' + SWEETSPOT_VER_MAJOR + '\n')
   file.write('minor = "' + SWEETSPOT_VER_MINOR + '"\n')
   file.write('compilation = ' + SWEETSPOT_VER_COMPILATION + '\n')
   file.write('DB_NAME = "' + DB_NAME + '"\n')
   file.write('DB_USER = "' + DB_USER + '"\n')
   file.write('DB_PASSWORD = "' + DB_PASSWORD + '"\n')

   file.close()
   return
           
file_ver_name = 'version/version_gen.py'
env.Command(file_ver_name, [], build_websrv_version )

def make_dictionaries(target, source, env):
    target = target[0].path
    if not os.path.isdir(target):
        os.mkdir(target)
            
    for root, dirs, files in os.walk(source[0].path):
        for file in files:
            if file == 'meanings.json':
                dest = os.path.join(target, os.path.basename(os.path.normpath(root)) + '_normal.json')
                src = os.path.join(env.Dir(root).abspath, file)
                shutil.copy(src, dest)
                
                json_data = json.load(open(src))
                new_data = {}
                for k, v in json_data.iteritems():
                    new_data[v] = k
                dest = os.path.join(target, os.path.basename(os.path.normpath(root)) + '_reverse.json')
                f = open(dest, 'w+')
                f.write(json.dumps(new_data))
                f.close()     

server_side_dicts = env.Dir('values/dicts/')
env.Command(server_side_dicts, '../client/lang/', make_dictionaries)
env.Clean(file_ver_name, 'values/dicts/')
        
env.SideEffect( '../sweetspot.log', file_ver_name)

#install web
app_src = '../web'
for root, dirs, files in os.walk(app_src):
   p = os.path.relpath(root, app_src) #relative path
   for name in files:
      filename = os.path.join(root, name)
      if re.match('.*\.pyc$', filename):
         pyc = env.File(str(filename))
         env.SideEffect( pyc, file_ver_name)



# -*- mode: Python; scons script -*-

import os, platform, re, shutil, subprocess, json, sys
import file_include

Import('env')

Import('SWEETSPOT_VER_MAJOR')
Import('SWEETSPOT_VER_MINOR')
Import('SWEETSPOT_VER_COMPILATION')
Import('WEB_SRV_PREFIX WEB_SRV_HOST WEB_SRV_PORT WEB_CLIENT_HOST WEB_CLIENT_PORT')
Import('DB_NAME DB_USER DB_PASSWORD')
Import('DEBUG_FLAG')

def build_client_version( target, source, env):
   file=open(str(target[0]),'w')
   file.write('/**\n * @file {}\n * @brief Version information, file generated by SCons\n */\n\n'.format(target[0]))
   file.write('client_ver_major = ' + SWEETSPOT_VER_MAJOR + '\n')
   file.write('client_ver_minor = "' + SWEETSPOT_VER_MINOR + '"\n')
   file.write('client_ver_compilation = ' + SWEETSPOT_VER_COMPILATION + '\n')
   file.write('client_server_prefix = "' + WEB_SRV_PREFIX + '"\n' )
   file.close()
   return

def prepare_bower_components(target, source):
	bower_json = open(source)
	sweetspot_deps = json.loads(bower_json.read())['ss-dependencies']
	bower_json.close()
	
	debug_inc_handler = open(target[0], 'w');
	release_inc_handler = open(target[1], 'w');
	
	for section in sweetspot_deps:
		for dep in sweetspot_deps[section]:
			if dep[-3:] in ['.js', '=PL']:
				template = "<script src='%s' data-cover></script>\n" if section == 'common' else "<script src='%s'></script>\n"
			elif dep[-3:] == 'css':
				template = "<link rel='stylesheet' type='text/css' href='%s' />\n"
			else:
				continue
			
			if section in ['release', 'common']:
				release_inc_handler.write(template % dep)		
		
			if section in ['debug', 'common']:
				debug_inc_handler.write(template % dep)
	
	debug_inc_handler.close();
	release_inc_handler.close();		

def build_lighttpd_conf( target, source, env):
    configText = """
var.server_root = "{root_path}"
var.log_root    = server_root
var.state_dir   = server_root
var.home_dir    = server_root
var.conf_dir    = server_root

server.port = {client_port}
server.pid-file = state_dir + "/lighttpd.pid"
server.errorlog = log_root + "/lighttpd.log"
server.document-root = server_root

index-file.names = ( "index.html" )

mimetype.assign = (
  ".html" => "text/html",
  ".txt" => "text/plain",
  ".jpg" => "image/jpeg",
  ".png" => "image/png",
  ".css" => "text/css",
  ".svg" => "image/svg+xml",
  ".js" => "text/javascript"
)

static-file.exclude-extensions = (".py")
server.modules += ( "mod_proxy" )
#server.modules += ( "mod_accesslog" )

#### accesslog format (enable for using a proxy, like Pound, in front of Lighttpd)
#accesslog.format       = "%h %t %r %>s %b time: %T [s]"
#accesslog.filename       = log_root + "/access.log"

$HTTP["url"] =~ "^/{prefix}" {{
	proxy.balance = "hash"
	proxy.server = ( "" => (
		"{prefix}" => ( "host" => "{server_host}", "port" => {server_port} )
	))
}}
"""
    with open(str(target[0]),'w') as file:
        file.write(configText.format(prefix=WEB_SRV_PREFIX, server_host=WEB_SRV_HOST, server_port=WEB_SRV_PORT, client_host=WEB_CLIENT_HOST, client_port=WEB_CLIENT_PORT, root_path=os.path.abspath('client')))

js_out_client_dir = os.path.normpath('./js')
css_out_client_dir = os.path.normpath('./css')

client_ver_name = os.path.join(js_out_client_dir, 'version.js')
env.Command(client_ver_name, [], build_client_version )

includes = prepare_bower_components(['include_debug.html', 'include_release.html'], 'bower.json')

#build index.html from frame (sweetspot_realase, sweetspot_debug) include and body
in_index = 'sweetspot_release.html'
if DEBUG_FLAG:
   in_index = 'sweetspot_debug.html'
out_index = os.path.normpath('index.html')
file_include.file_substitution(in_file=in_index,
                               out_file=out_index,
                               inc_dir=os.path.normpath('.'))

env.SideEffect(out_index, in_index )
env.SideEffect('file_include.pyc', in_index )

#build 'unit_test_out.html' from frame, include and body
in_test = 'unit_test.html'
out_test = 'unit_test_out.html'
file_include.file_substitution(in_file=in_test,
                               out_file=out_test,
                               inc_dir=os.path.normpath('.'))
env.SideEffect(out_test, in_test )
env.SideEffect('file_include.pyc', in_test )
env.SideEffect('include_release.html', in_index)
env.SideEffect('include_debug.html', in_index)

#build lighttpd config
lighttd_conf = 'lighttpd.develop'
env.Command(lighttd_conf, [], build_lighttpd_conf )
env.SideEffect('lighttpd.log', lighttd_conf)

